{"remainingRequest":"/Users/minhduong/WorkPlace/vue/vue_grif/grid_layout/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/minhduong/WorkPlace/vue/vue_grif/grid_layout/src/components/grid_test.vue?vue&type=style&index=0&id=47f7688b&scoped=true&lang=css&","dependencies":[{"path":"/Users/minhduong/WorkPlace/vue/vue_grif/grid_layout/src/components/grid_test.vue","mtime":1621239204117},{"path":"/Users/minhduong/WorkPlace/vue/vue_grif/grid_layout/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/minhduong/WorkPlace/vue/vue_grif/grid_layout/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/minhduong/WorkPlace/vue/vue_grif/grid_layout/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/minhduong/WorkPlace/vue/vue_grif/grid_layout/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/minhduong/WorkPlace/vue/vue_grif/grid_layout/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5ncmlkLWNvbnRhaW5lciB7CiAgZGlzcGxheTogZ3JpZDsKICBiYWNrZ3JvdW5kOiB3aGl0ZXNtb2tlOwogIHBhZGRpbmc6IDEwcHg7CiAgZ3JpZC1jb2x1bW4tZ2FwOiA1MHB4OwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogIGF1dG8gYXV0byBhdXRvIGF1dG8gYXV0byBhdXRvIGF1dG8gYXV0byBhdXRvIGF1dG8gYXV0byBhdXRvOwp9CgouZ3JpZC1pdGVtIHsKICBib3JkZXI6IDFweCBkYXNoZWQgcmdiYSgwLCAwLCAwLCAwLjgpOwogIHBhZGRpbmc6IDIwcHg7CiAgZm9udC1zaXplOiAzMHB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKfQo="},{"version":3,"sources":["grid_test.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"grid_test.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n      <draggable v-model=\"cells\" >\n        <transition-group tag=\"div\" class=\"grid-container\" name=\"grid\">\n      <div class=\"grid-item\" v-for=\"(cell,i) in cells\" :key=\"i\" :style=\"style(cell)\">\n          <slot :name=i>{{cell.wid}}</slot>\n      </div>\n        </transition-group>\n      </draggable>\n    </div>\n</template>\n<script>\nimport draggable from 'vuedraggable'\n\nexport default {\n  name: \"grid_test\",\n  components: {\n    draggable,\n  },\n  props: {\n    layout: {\n      type: Object,\n      required: true\n    },\n  },\n  computed: {\n    cells : {\n      get: function () {\n        let cells = []\n        this.layout.rows.forEach((grid,row) => {\n          console.log(this.layout.wid)\n          // eslint-disable-next-line no-unused-vars\n          cells.push(...Array.from({length: grid}, (v,i) => (v = {row:row +1,column:1+((12/grid)*i) , spancol: (12/grid),spanrow: 1, wid: this.getWid(i,row)})))\n        })\n       return cells\n      },\n      set :function (newvalue) {\n         const c = Array.from({length: newvalue.length}, (v,i) => (v = newvalue[i]).wid)\n        let newValue = this.layout\n        newValue.wid = c\n        this.updateLayout(newValue)\n      }\n    }\n  },\n  data() {\n    return {\n      a: [],\n    }\n  },\n  methods: {\n    style(cell) {\n// eslint-disable-next-line no-unused-vars\n      let a = [{'grid-area': ''.concat(...[cell.row ,'/', cell.column,'/', 'span ' + cell.spanrow,'/', 'span '+ cell.spancol]).replaceAll(',','')}]\n      return a\n    },\n    getWid(col,row) {\n      let wid = 0\n      for (let i = 0; i < row; i++ ) {\n        wid += this.layout.rows[i]\n      }\n      return this.layout.wid[wid + col]\n    },\n    updateLayout(newValue) {\n      this.$emit('update:layout', newValue)\n    }\n  },\n}\n</script>\n\n<style scoped>\n.grid-container {\n  display: grid;\n  background: whitesmoke;\n  padding: 10px;\n  grid-column-gap: 50px;\n  grid-template-columns:  auto auto auto auto auto auto auto auto auto auto auto auto;\n}\n\n.grid-item {\n  border: 1px dashed rgba(0, 0, 0, 0.8);\n  padding: 20px;\n  font-size: 30px;\n  text-align: center;\n}\n</style>\n"]}]}